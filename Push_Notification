Configure Your App for Push Notifications:
Enable push notifications in your Xcode project capabilities.
Obtain an Apple Developer account and create an App ID with push notification capabilities enabled.
Generate a push notification SSL certificate or authentication key in the Apple Developer portal.
Register for Push Notifications:In your app delegate file (AppDelegate.swift), import the UserNotifications framework and set up push notification registration:



import UIKit
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        UNUserNotificationCenter.current().delegate = self
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if granted {
                DispatchQueue.main.async {
                    application.registerForRemoteNotifications()
                }
            }
        }
        return true
    }

    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        let token = deviceToken.map { String(format: "%02.2hhx", $0) }.joined()
        print("Device token:", token)
    }

    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("Failed to register for remote notifications:", error.localizedDescription)
    }

    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        // Handle remote notification received while app is in foreground or background
        print("Received remote notification:", userInfo)
        completionHandler(.newData) // Call the completion handler when finished processing
    }

    // Handle other AppDelegate methods as needed
}
Handle Remote Notifications:Implement the UNUserNotificationCenterDelegate methods to handle incoming remote notifications:



func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
    // Handle notification when app is in foreground
    print("Received remote notification while app is in foreground:", notification)
    completionHandler([.alert, .sound, .badge]) // Display notification to the user
}

func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
    // Handle user's response to the notification
    print("User tapped on the notification:", response.notification)
    completionHandler()
}


Send Test Notifications:Use a tool like the APNs Sandbox environment or a service provider to send test push notifications to your app. You'll need the device token obtained in didRegisterForRemoteNotificationsWithDeviceToken to target specific devices.
Display Notifications:Update your app's UI to display notifications to the user when they are received. You can customize the appearance and behavior of notifications using the UNNotificationContent and UNNotificationRequest classes.
Handle Notification Actions:If your notifications include actions (e.g., buttons), implement the corresponding methods in the UNUserNotificationCenterDelegate to handle user interactions with the notification actions.
Test Notifications:Test your push notification implementation thoroughly, including scenarios like receiving notifications while the app is in the foreground, background, or not running.
