Import Core Location:
First, import the Core Location framework in your Swift file:
swift
Copy code
import CoreLocation
Request Authorization:
Before accessing the user's location, you need to request authorization from the user. Add the required keys to your app's Info.plist file for location usage description:
NSLocationWhenInUseUsageDescription: Requested when the app is in use.
NSLocationAlwaysUsageDescription: Requested when the app is in the background (if applicable).
Create a Location Manager:
Initialize a CLLocationManager instance to manage location-related operations:
swift
Copy code
let locationManager = CLLocationManager()
locationManager.delegate = self // Set delegate to receive location updates
locationManager.requestWhenInUseAuthorization() // Request authorization
Implement Delegate Methods:
Conform to the CLLocationManagerDelegate protocol and implement delegate methods to handle location updates and authorization status changes:
swift
Copy code
extension YourViewController: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        // Handle location updates
        if let location = locations.last {
            print("Latitude: \(location.coordinate.latitude), Longitude: \(location.coordinate.longitude)")
        }
    }

    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        // Handle authorization status changes
        switch status {
        case .authorizedWhenInUse, .authorizedAlways:
            manager.startUpdatingLocation() // Start location updates
        case .denied, .restricted:
            // Handle denied or restricted authorization
            print("Location access denied")
        case .notDetermined:
            // Handle not determined status
            print("Location authorization status not determined")
        @unknown default:
            fatalError("Unknown location authorization status")
        }
    }
}
Request Location Updates:
After obtaining authorization, start requesting location updates:
swift
Copy code
locationManager.startUpdatingLocation()
Handle Location Updates:
Implement the didUpdateLocations delegate method to receive and handle location updates:
swift
Copy code
func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
    if let location = locations.last {
        // Handle location update
        print("New location: \(location.coordinate.latitude), \(location.coordinate.longitude)")
    }
}
Stop Location Updates (if needed):
Stop location updates when they are no longer needed:
swift
Copy code
locationManager.stopUpdatingLocation()
This basic setup allows your app to access and handle location updates. You can customize the location manager's behavior further based on your app's requirements, such as specifying accuracy, distance filters, and handling errors.
