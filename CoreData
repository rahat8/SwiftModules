Setting up Core Data Stack:
Start by creating a Core Data model file (.xcdatamodeld) in your Xcode project. Add entities, attributes, and relationships as needed.
Generate NSManagedObject Subclasses:
Xcode can automatically generate subclasses of NSManagedObject for your entities. Select your .xcdatamodeld file, go to Editor > Create NSManagedObject Subclass, and follow the prompts to generate the subclasses.
Initializing Core Data Stack:
Set up the Core Data stack in your AppDelegate or a dedicated Core Data manager class. Import the Core Data framework and add the necessary properties for the managed object context, persistent store coordinator, and managed object model.



import CoreData

class CoreDataStack {
    static let shared = CoreDataStack()

    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "YourDataModelFileName")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()

    var viewContext: NSManagedObjectContext {
        return persistentContainer.viewContext
    }

    // Add more methods and configurations as needed
}



Inserting Data:
To insert data into Core Data, create an instance of your NSManagedObject subclass and save the context.

let context = CoreDataStack.shared.viewContext
let entity = NSEntityDescription.entity(forEntityName: "YourEntityName", in: context)!
let newItem = NSManagedObject(entity: entity, insertInto: context)
newItem.setValue("Example", forKey: "attributeName")

do {
    try context.save()
} catch {
    print("Failed to save context: \(error)")
}



Fetching Data:
Fetch data from Core Data using NSFetchRequest and NSPredicate as needed.

let context = CoreDataStack.shared.viewContext
let fetchRequest: NSFetchRequest<YourEntityName> = YourEntityName.fetchRequest()
fetchRequest.predicate = NSPredicate(format: "attributeName = %@", "Example")

do {
    let results = try context.fetch(fetchRequest)
    for result in results {
        print(result)
    }
} catch {
    print("Fetch failed: \(error)")
}




Updating and Deleting Data:
To update or delete data, fetch the object you want to modify, make changes, and save the context.

let context = CoreDataStack.shared.viewContext
let fetchRequest: NSFetchRequest<YourEntityName> = YourEntityName.fetchRequest()
fetchRequest.predicate = NSPredicate(format: "attributeName = %@", "Example")

do {
    let results = try context.fetch(fetchRequest)
    if let itemToUpdate = results.first {
        itemToUpdate.setValue("Updated Example", forKey: "attributeName")
        try context.save()
    }
} catch {
    print("Update failed: \(error)")
}
